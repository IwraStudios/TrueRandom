using System;
using System.Text;
using System.Threading.Tasks;

namespace Gravity.TrueRandom
{
    public class RandomConstants
    {

    }
    /// <summary>
    /// Low coding layer for manual coding
    /// </summary>
    public class RandomUtils
    {
        /// <summary>
        /// Combines 2 byte-arrays into 1
        /// </summary>
        /// <param name="bytes">2d byte-array wich will be converted to 1d array</param>
        /// <returns>1d byte-array ready for processing</returns>
        public byte[] CombineByteArray(byte[][] bytes)
        {
            byte[] start = new byte[0];
            foreach (byte[] a in bytes)
            {
                int b = start.Length;
                Array.Resize<byte>(ref start, (start.Length + a.Length));
                Array.Copy(a, 0, start, b, a.Length);
            }
            return start;
        }
        public int GetPseudoRandomNumber(int input = 0, int min = 0, int max = int.MaxValue)
        {
            return new Random(input).Next(min, max);
        }
        /// <summary>
        /// Converts an byte-array (less than 4 bytes) to an int32 
        /// </summary>
        /// <param name="bytes">input byte-array</param>
        /// <returns>int belonging to the byte array</returns>
        public int ByteArrayToInt(byte[] bytes)
        {
            if (BitConverter.IsLittleEndian) Array.Reverse(bytes);
            return BitConverter.ToInt32(bytes, 0);
        }
        /// <summary>
        /// Converts byte-array into an string containing hex numbers
        /// </summary>
        /// <param name="ba">input byte-array</param>
        /// <returns>string in format{0:x2} also known as hex</returns>
        public string ByteArrayToHex(byte[] ba)
        {
            StringBuilder hex = new StringBuilder(ba.Length * 2);
            foreach (byte b in ba) hex.AppendFormat("{0:x2}", b);
            return hex.ToString();
        }
        /// <summary>
        /// Converts byte-array to an UTF-8 string
        /// </summary>
        /// <param name="ba">input byte-array</param>
        /// <returns>string with encoding UTF-8</returns>
        public string ByteArrayToString(byte[] ba)
        { //UTF8 Only for now TODO: added other encodings
            return Encoding.UTF8.GetString(ba, 0, ba.Length);
        }
        /// <summary>
        /// async task wich wil contain an possible TrueRandom int
        /// </summary>
        /// <param name="min">minimal amount</param>
        /// <param name="max">maximal amount</param>
        /// <returns>Task(Int32) wich will be generated</returns>
        public async Task<int> InefficientRandomInt(int min = int.MinValue, int max = int.MaxValue)
        {
            await Task.Delay(GetPseudoRandomNumber(0, 1, 16));
            int time = int.Parse(DateTime.Now.ToString("fff")); //Same
            return GetPseudoRandomNumber(time, min, max);
        }
        /// <summary>
        /// int wich will be randomly generated using System.Random
        /// </summary>
        /// <param name="min">minimal amount</param>
        /// <param name="max">maximal amount</param>
        /// <returns>Int32 wich will be generated</returns>
        public int EfficientRandomInt(int min = int.MinValue, int max = int.MaxValue)
        {
            //Thread.Sleep(this.GetPseudoRandomNumber(0, 1, 50));
            int time = int.Parse(DateTime.Now.ToString("fff")); //Same
            return GetPseudoRandomNumber(time, min, max);
        }
    }

    /// <summary>
    /// Top level coding for programs without hard coding
    /// Meant to be used in general purpose programs
    /// </summary>
    public class RandomGenerator
    {
        /// <summary>
        /// will give (uint) amount of bytes in an byte-array
        /// </summary>
        /// <param name="AmountOfBytes">Self explainatory</param>
        /// <returns>The randomly generated bytes</returns>
        public byte[] GetRandomBytes(uint AmountOfBytes = 4)
        {
            if (AmountOfBytes < 4) AmountOfBytes = 4;
            byte[][] tmp = new byte[AmountOfBytes / 4][];
            for (uint i = 0; i < AmountOfBytes / 4; i++)
            {
                int time = int.Parse(DateTime.Now.ToString("fff")); //Same
                int d = new RandomUtils().GetPseudoRandomNumber(time); //TODO: Add more randomness/New own RandomAlg.
                //byte[] b = System.BitConverter.GetBytes(d);
                tmp[i] = BitConverter.GetBytes(d);
            }
            if ((AmountOfBytes % 4) != 0) Array.Resize<byte>(ref tmp[tmp.Length - 1], Convert.ToInt32(AmountOfBytes % 4)); //Fixes only 4 * n issue
            return new RandomUtils().CombineByteArray(tmp);
        }
        /// <summary>
        /// Randomly generated string with (uint) length
        /// </summary>
        /// <param name="Length">(uint) amount of characters(8/16/32-bit) in the string</param>
        /// <param name="a">(System.Text.Encoding)The encoding to encode the bytes with</param>
        /// <returns>TrueRandomly generated string of your encoding type</returns>
        public string GetRandomString(uint Length, Encoding a)
        {
            string randomstring = a.GetString(GetRandomBytes(Length * 4), 0, (int)Length*4);
            return randomstring.Remove(randomstring.Length - ((int)Length + 1), (int)Length);
        }
    }
}
